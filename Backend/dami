import User from "../models/user.model.js";
import bcrypt from "bcryptjs";
import JWT from "jsonwebtoken";
import createTokenAndSaveCookie from "../JWT/generateToken.js";

export const signup = async (req, res) => {
    console.log("Request Body:", req.body); // âœ… Debugging step

    const { fullname, email, password, confirmPassword } = req.body;

    if (!fullname || !email || !password || !confirmPassword) {
        return res.status(400).json({ error: "All fields are required" });
    }

    try {
        if (password !== confirmPassword) {
            return res.status(400).json({ error: "Passwords do not match" });
        }

        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ error: "User already exists" });
        }
        // Hash The Password
        const hashPassword = await bcrypt.hash(password,10)

        const newUser = new User({
            fullname, 
            email,
            password: hashPassword,
        });

        await newUser.save();
        if(newUser){
            createTokenAndSaveCookie(newUser._id, res);
            res.status(201).json({ message: "User Registered Successfully",
                user: {
                    _id: newUser._id,
                    fullname: newUser.fullname,
                    email: newUser.email,
                    }
             });
        }

    } catch (error) {
        console.error(error);
        res.status(500).json({ error: "Internal Server Error" });
    }
};


//login

export const login = async (req, res) => {
    const { email, password } = req.body;

    try {
        // Check if user exists
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ error: "Invalid user credentials" });
        }

        // Compare passwords
        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ error: "Invalid user credentials" });
        }
            
        // Generate token and save in cookie
        createTokenAndSaveCookie(user._id, res);

        res.status(200).json({
            message: "User Logged In Successfully",
            user: {
                _id: user._id,
                fullname: user.fullname,
                email: user.email,
            },
        });
          // Generate JWT Token
          const token = JWT.sign({ userId: user._id }, process.env.JWT_TOKEN, {
            expiresIn: "1h",
        });

        // Set token in HTTP-only Cookie
        res.cookie("JWT", token, {
            httpOnly: true,   // Prevents XSS attacks
            secure: false,    // Set to true if using HTTPS
            sameSite: "strict"
        });
    } catch (error) {
        console.error("Error in login controller:", error);
        res.status(500).json({ error: "Internal Server Error" });
    }
};

//logout

export const logout=(req,res)=>{
    try {
        res.clearCookie("JWT");
        res.status(201).json({message:"User Logged Out Successfully"});

    }   catch{
        console.log(error)
        res.status(500).json({error:"Internal Server Error"});
    }
};

//user conntect to data base

export const allUsers = async (req, res) => {
    try {
        const loggedInUser=req.user._id;
        const filteredUsers = await User.find({_id:{$ne: loggedInUser}}).select("-password");
        res.status(201).json(
            filteredUsers
        );
    } catch (error) {
        console.log("Error in allUsers Controller: " + error);
        res.status(500).json({ error: "Internal Server Error" });
    }
};
